{
    "nodes": [
        [
            {
                "position": [
                    -158.2032470703125,
                    -27.145538330078126
                ],
                "comp_type": "n2_transform"
            },
            {
                "filepath": "",
                "name": "",
                "id": 0,
                "comp_type": "n0_identity"
            },
            {
                "visible": true,
                "editable": true,
                "comp_type": "n0_flags"
            },
            {
                "node_type": "renderlab::shader_graph",
                "node_val": {
                    "title": "ShaderGraph",
                    "style": {
                        "only_title": false,
                        "small_title_font": false
                    },
                    "name": "node0",
                    "filepath": "..\\shader\\mountain.json",
                    "vert_shader": "model",
                    "vert": "#version 330 core\nlayout (location = 1) in vec2 aTexCoord;\nuniform sampler2D tex;\nlayout (location = 0) in vec3 aPos;\nout vec2 TexCoord;\nout vec3 frag_pos;\n\nuniform UBO {\nmat4 view;\nmat4 projection;\nmat4 model;\n\n};\n\nvoid main()\n{\nfloat r = texture(tex, aTexCoord).r;\n\nfloat f = 0.200000;\nfloat mul = r * f;\nfloat r0 = aPos.r;\nfloat g = aPos.g;\n\nmat4 mul0 = projection * view;\nfloat f0 = 1.000000;\nvec4 rgba = vec4(r0, g, mul, f0);\nmat4 mul1 = mul0 * model;\nvec4 mul2 = mul1 * rgba;\ngl_Position = mul2;\nTexCoord = aTexCoord;frag_pos = aPos;\n}\n\t",
                    "frag": "#version 330 core\nin vec2 TexCoord;\nuniform sampler2D tex;\nuniform sampler2D tex0;\n\nvec4 hash4( vec2 p ) { return fract(sin(vec4( 1.0+dot(p,vec2(37.0,17.0)),\n                                              2.0+dot(p,vec2(11.0,47.0)),\n                                              3.0+dot(p,vec2(41.0,29.0)),\n                                              4.0+dot(p,vec2(23.0,31.0))))*103.0); }\n\nvec4 textureNoTile1( sampler2D samp, in vec2 uv )\n{\n    ivec2 iuv = ivec2( floor( uv ) );\n     vec2 fuv = fract( uv );\n\n    // generate per-tile transform\n    vec4 ofa = hash4( iuv + ivec2(0,0) );\n    vec4 ofb = hash4( iuv + ivec2(1,0) );\n    vec4 ofc = hash4( iuv + ivec2(0,1) );\n    vec4 ofd = hash4( iuv + ivec2(1,1) );\n\n    vec2 ddx = dFdx( uv );\n    vec2 ddy = dFdy( uv );\n\n    // transform per-tile uvs\n    ofa.zw = sign( ofa.zw-0.5 );\n    ofb.zw = sign( ofb.zw-0.5 );\n    ofc.zw = sign( ofc.zw-0.5 );\n    ofd.zw = sign( ofd.zw-0.5 );\n\n    // uv's, and derivatives (for correct mipmapping)\n    vec2 uva = uv*ofa.zw + ofa.xy, ddxa = ddx*ofa.zw, ddya = ddy*ofa.zw;\n    vec2 uvb = uv*ofb.zw + ofb.xy, ddxb = ddx*ofb.zw, ddyb = ddy*ofb.zw;\n    vec2 uvc = uv*ofc.zw + ofc.xy, ddxc = ddx*ofc.zw, ddyc = ddy*ofc.zw;\n    vec2 uvd = uv*ofd.zw + ofd.xy, ddxd = ddx*ofd.zw, ddyd = ddy*ofd.zw;\n\n    // fetch and blend\n    vec2 b = smoothstep( 0.25,0.75, fuv );\n\n    return mix( mix( textureGrad( samp, uva, ddxa, ddya ),\n                     textureGrad( samp, uvb, ddxb, ddyb ), b.x ),\n                mix( textureGrad( samp, uvc, ddxc, ddyc ),\n                     textureGrad( samp, uvd, ddxd, ddyd ), b.x), b.y );\n}\n\nvec4 textureNoTile2( sampler2D samp, in vec2 uv )\n{\n    vec2 p = floor( uv );\n    vec2 f = fract( uv );\n\n    // derivatives (for correct mipmapping)\n    vec2 ddx = dFdx( uv );\n    vec2 ddy = dFdy( uv );\n\n    // voronoi contribution\n    vec4 va = vec4( 0.0 );\n    float wt = 0.0;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2 g = vec2( float(i), float(j) );\n        vec4 o = hash4( p + g );\n        vec2 r = g - f + o.xy;\n        float d = dot(r,r);\n        float w = exp(-5.0*d );\n        vec4 c = textureGrad( samp, uv + o.zw, ddx, ddy );\n        va += w*c;\n        wt += w;\n    }\n\n    // normalization\n    return va/wt;\n}\n\n//vec4 textureNoTile3( sampler2D samp, in vec2 uv )\n//{\n//    // sample variation pattern\n//    float k = texture( iChannel1, 0.005*x ).x; // cheap (cache friendly) lookup\n//\n//    // compute index\n//    float index = k*8.0;\n//    float i = floor( index );\n//    float f = fract( index );\n//\n//    // offsets for the different virtual patterns\n//    vec2 offa = sin(vec2(3.0,7.0)*(i+0.0)); // can replace with any other hash\n//    vec2 offb = sin(vec2(3.0,7.0)*(i+1.0)); // can replace with any other hash\n//\n//    // compute derivatives for mip-mapping\n//    vec2 dx = dFdx(x), dy = dFdy(x);\n//\n//    // sample the two closest virtual patterns\n//    vec3 cola = textureGrad( iChannel0, x + offa, dx, dy ).xxx;\n//    vec3 colb = textureGrad( iChannel0, x + offb, dx, dy ).xxx;\n//\n//    float sum( vec3 v ) { return v.x+v.y+v.z; }\n//\n//    // interpolate between the two virtual patterns\n//    return mix( cola, colb, smoothstep(0.2,0.8,f-0.1*sum(cola-colb)) );\n//}\n\n\nout vec4 FragColor;\nvec3 compute_normal_sobel_filter(sampler2D heightmap, vec2 position, float height_exaggeration)\n{\n    vec2 tex_sz_inv = (1.0 / textureSize(heightmap, 0));\n    float upperLeft = (texture(heightmap, (position + (vec2((- 1.0), 1.0) * tex_sz_inv))).r * height_exaggeration);\n    float upperCenter = (texture(heightmap, (position + (vec2(0.0, 1.0) * tex_sz_inv))).r * height_exaggeration);\n    float upperRight = (texture(heightmap, (position + (vec2(1.0, 1.0) * tex_sz_inv))).r * height_exaggeration);\n    float left = (texture(heightmap, (position + (vec2((- 1.0), 0.0) * tex_sz_inv))).r * height_exaggeration);\n    float right = (texture(heightmap, (position + (vec2(1.0, 0.0) * tex_sz_inv))).r * height_exaggeration);\n    float lowerLeft = (texture(heightmap, (position + (vec2((- 1.0), (- 1.0)) * tex_sz_inv))).r * height_exaggeration);\n    float lowerCenter = (texture(heightmap, (position + (vec2(0.0, (- 1.0)) * tex_sz_inv))).r * height_exaggeration);\n    float lowerRight = (texture(heightmap, (position + (vec2(1.0, (- 1.0)) * tex_sz_inv))).r * height_exaggeration);\n    float x = (((((upperRight + (2.0 * right)) + lowerRight) - upperLeft) - (2.0 * left)) - lowerLeft);\n    float y = (((((lowerLeft + (2.0 * lowerCenter)) + lowerRight) - upperLeft) - (2.0 * upperCenter)) - upperRight);\n    return normalize(vec3((- x), 1.0, y));\n}\n\nvec3 compute_normal_central_difference(sampler2D heightmap, vec2 position, float height_exaggeration)\n{\n    vec2 tex_sz_inv = (1.0 / textureSize(heightmap, 0));\n    float leftHeight = (texture(heightmap, (position - (vec2(1.0, 0.0) * tex_sz_inv))).r * height_exaggeration);\n    float rightHeight = (texture(heightmap, (position + (vec2(1.0, 0.0) * tex_sz_inv))).r * height_exaggeration);\n    float bottomHeight = (texture(heightmap, (position - (vec2(0.0, 1.0) * tex_sz_inv))).r * height_exaggeration);\n    float topHeight = (texture(heightmap, (position + (vec2(0.0, 1.0) * tex_sz_inv))).r * height_exaggeration);\n    return normalize(vec3((leftHeight - rightHeight), 2.0, (bottomHeight - topHeight)));\n}\n\nvec3 normal_from_height(sampler2D heightmap, vec2 texcoord, float height_exaggeration)\n{\n    return compute_normal_central_difference(heightmap, texcoord, height_exaggeration);\n}\n\n\nvoid main()\n{\nvec3 f3 = vec3(1.000000, 1.000000, 0.000000);\nvec3 _out = normalize(f3);\nfloat f = 20.000000;\nvec3 ret = compute_normal_sobel_filter(tex, TexCoord, f);\n\nfloat ret0 = dot(ret, _out);\nfloat f0 = 10.000000;\nvec2 mul = TexCoord * vec2(f0, f0);\nvec4 rgba = textureNoTile1(tex0, mul);\n\nvec4 mul0 = rgba * vec4(ret0, ret0, ret0, ret0);\nFragColor = vec4(mul0.xyz, 1.0);\n\n}\n\t",
                    "props": []
                },
                "comp_type": "bp_node",
                "connection": [
                    {
                        "from": "out",
                        "to": [
                            {
                                "node_idx": 1,
                                "pin": "obj"
                            }
                        ]
                    }
                ],
                "connection": [
                    {
                        "from": "out",
                        "to": [
                            {
                                "node_idx": 1,
                                "pin": "obj"
                            }
                        ]
                    }
                ]
            }
        ],
        [
            {
                "position": [
                    7.6588134765625,
                    -10.515789031982422
                ],
                "comp_type": "n2_transform"
            },
            {
                "filepath": "",
                "name": "",
                "id": 0,
                "comp_type": "n0_identity"
            },
            {
                "visible": true,
                "editable": true,
                "comp_type": "n0_flags"
            },
            {
                "node_type": "renderlab::bind",
                "node_val": {
                    "title": "Bind",
                    "style": {
                        "only_title": false,
                        "small_title_font": false
                    },
                    "name": "node2",
                    "channel": 0,
                    "props": []
                },
                "comp_type": "bp_node",
                "connection": [
                    {
                        "from": "next",
                        "to": [
                            {
                                "node_idx": 5,
                                "pin": "prev"
                            }
                        ]
                    }
                ],
                "connection": [
                    {
                        "from": "next",
                        "to": [
                            {
                                "node_idx": 5,
                                "pin": "prev"
                            }
                        ]
                    }
                ]
            }
        ],
        [
            {
                "position": [
                    288.20867919921877,
                    -6.839473724365234
                ],
                "comp_type": "n2_transform"
            },
            {
                "filepath": "",
                "name": "",
                "id": 0,
                "comp_type": "n0_identity"
            },
            {
                "visible": true,
                "editable": true,
                "comp_type": "n0_flags"
            },
            {
                "node_type": "renderlab::pass_end",
                "node_val": {
                    "title": "PassEnd0",
                    "style": {
                        "only_title": false,
                        "small_title_font": false
                    },
                    "name": "",
                    "pass_end": 0,
                    "props": []
                },
                "comp_type": "bp_node",
                "connection": [],
                "connection": []
            }
        ],
        [
            {
                "position": [
                    -302.92730712890627,
                    41.002899169921878
                ],
                "comp_type": "n2_transform"
            },
            {
                "filepath": "",
                "name": "",
                "id": 0,
                "comp_type": "n0_identity"
            },
            {
                "visible": true,
                "editable": true,
                "comp_type": "n0_flags"
            },
            {
                "node_type": "renderlab::clear",
                "node_val": {
                    "title": "Clear",
                    "style": {
                        "only_title": false,
                        "small_title_font": false
                    },
                    "name": "node18",
                    "type": [
                        "color",
                        "depth"
                    ],
                    "color": {
                        "r": 51,
                        "g": 79,
                        "b": 79,
                        "a": 255
                    },
                    "props": []
                },
                "comp_type": "bp_node",
                "connection": [
                    {
                        "from": "next",
                        "to": [
                            {
                                "node_idx": 4,
                                "pin": "prev"
                            }
                        ]
                    }
                ],
                "connection": [
                    {
                        "from": "next",
                        "to": [
                            {
                                "node_idx": 4,
                                "pin": "prev"
                            }
                        ]
                    }
                ]
            }
        ],
        [
            {
                "position": [
                    -159.22337341308595,
                    42.96824645996094
                ],
                "comp_type": "n2_transform"
            },
            {
                "filepath": "",
                "name": "",
                "id": 0,
                "comp_type": "n0_identity"
            },
            {
                "visible": true,
                "editable": true,
                "comp_type": "n0_flags"
            },
            {
                "node_type": "renderlab::cull",
                "node_val": {
                    "title": "Cull",
                    "style": {
                        "only_title": false,
                        "small_title_font": false
                    },
                    "name": "node24",
                    "type": "off",
                    "props": []
                },
                "comp_type": "bp_node",
                "connection": [
                    {
                        "from": "next",
                        "to": [
                            {
                                "node_idx": 1,
                                "pin": "prev"
                            }
                        ]
                    }
                ],
                "connection": [
                    {
                        "from": "next",
                        "to": [
                            {
                                "node_idx": 1,
                                "pin": "prev"
                            }
                        ]
                    }
                ]
            }
        ],
        [
            {
                "position": [
                    142.0179443359375,
                    -32.556922912597659
                ],
                "comp_type": "n2_transform"
            },
            {
                "filepath": "",
                "name": "",
                "id": 0,
                "comp_type": "n0_identity"
            },
            {
                "visible": true,
                "editable": true,
                "comp_type": "n0_flags"
            },
            {
                "node_type": "renderlab::draw",
                "node_val": {
                    "title": "Draw",
                    "style": {
                        "only_title": false,
                        "small_title_font": false
                    },
                    "name": "node20",
                    "props": []
                },
                "comp_type": "bp_node",
                "connection": [
                    {
                        "from": "next",
                        "to": [
                            {
                                "node_idx": 2,
                                "pin": "prev"
                            }
                        ]
                    }
                ],
                "connection": [
                    {
                        "from": "next",
                        "to": [
                            {
                                "node_idx": 2,
                                "pin": "prev"
                            }
                        ]
                    }
                ]
            }
        ],
        [
            {
                "position": [
                    -11.27752685546875,
                    -87.46598815917969
                ],
                "comp_type": "n2_transform"
            },
            {
                "filepath": "",
                "name": "",
                "id": 0,
                "comp_type": "n0_identity"
            },
            {
                "visible": true,
                "editable": true,
                "comp_type": "n0_flags"
            },
            {
                "node_type": "renderlab::primitive_shape",
                "node_val": {
                    "title": "PrimitiveShape",
                    "style": {
                        "only_title": false,
                        "small_title_font": false
                    },
                    "name": "node21",
                    "type": "grids",
                    "layout": "pos_tex",
                    "props": []
                },
                "comp_type": "bp_node",
                "connection": [
                    {
                        "from": "out",
                        "to": [
                            {
                                "node_idx": 5,
                                "pin": "obj"
                            }
                        ]
                    }
                ],
                "connection": [
                    {
                        "from": "out",
                        "to": [
                            {
                                "node_idx": 5,
                                "pin": "obj"
                            }
                        ]
                    }
                ]
            }
        ]
    ],
    "comp_type": "n0_complex",
    "page_type": "render_graph"
}